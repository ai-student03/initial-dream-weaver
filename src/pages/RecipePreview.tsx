
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { supabase } from "@/integrations/supabase/client";
import { Recipe, RecipeFormData } from '@/lib/types';
import { Skeleton } from '@/components/ui/skeleton';

const RecipePreview: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const formData = location.state?.formData as RecipeFormData;
  const [recipe, setRecipe] = useState<Recipe | null>(null);
  const [loading, setLoading] = useState(true);
  const [savingRecipe, setSavingRecipe] = useState(false);
  const [sendingEmail, setSendingEmail] = useState(false);

  useEffect(() => {
    if (!formData) {
      navigate('/');
      return;
    }
    
    // For demo purposes, we'll simulate a recipe generation
    // In production, this would call a Supabase Edge Function
    const generateRecipe = async () => {
      try {
        setLoading(true);
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Sample generated recipe based on inputs
        const sampleRecipe: Recipe = {
          recipeName: generateRecipeName(formData),
          ingredients: generateIngredients(formData.ingredients),
          instructions: generateInstructions(),
          protein: Math.round(Math.random() * 30 + 20),
          carbs: Math.round(Math.random() * 40 + 30),
          fat: Math.round(Math.random() * 15 + 10),
          calories: Math.round(Math.random() * 300 + 400),
          cookingTime: formData.cookingTime,
          goals: formData.goals,
          isFavorited: false,
          imageUrl: `https://source.unsplash.com/random/800x600/?food,${formData.ingredients.split(',')[0]}`,
        };
        
        setRecipe(sampleRecipe);
      } catch (error) {
        console.error("Error generating recipe:", error);
        toast.error("Failed to generate a recipe. Please try again.");
        navigate('/');
      } finally {
        setLoading(false);
      }
    };

    generateRecipe();
  }, [formData, navigate]);

  const handleSaveRecipe = async () => {
    if (!recipe) return;
    
    try {
      setSavingRecipe(true);
      const { error } = await supabase.from('saved_recipes').insert({
        recipe_name: recipe.recipeName,
        ingredients: recipe.ingredients,
        instructions: recipe.instructions,
        protein: recipe.protein,
        carbs: recipe.carbs,
        fat: recipe.fat,
        calories: recipe.calories,
        cooking_time: recipe.cookingTime,
        goals: recipe.goals,
        image_url: recipe.imageUrl,
        is_favorited: recipe.isFavorited
      });
      
      if (error) throw error;
      
      toast.success("Recipe saved successfully!");
    } catch (error) {
      console.error("Error saving recipe:", error);
      toast.error("Failed to save recipe. Please try again.");
    } finally {
      setSavingRecipe(false);
    }
  };

  const handleSendEmail = async () => {
    if (!recipe) return;
    
    try {
      setSendingEmail(true);
      // Here we would call a Supabase Edge Function to send an email
      // For now, just simulate success
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast.success("Recipe sent to your email!");
    } catch (error) {
      console.error("Error sending email:", error);
      toast.error("Failed to send email. Please try again.");
    } finally {
      setSendingEmail(false);
    }
  };

  const generateRecipeName = (data: RecipeFormData): string => {
    // This would be generated by AI in production
    const mainIngredient = data.ingredients.split(',')[0].trim();
    const adjectives = ['Delicious', 'Healthy', 'Quick', 'Nourishing', 'Power-Packed'];
    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    
    if (data.goals.includes('Build muscle')) {
      return `${adjective} Protein-Rich ${mainIngredient} Bowl`;
    } else if (data.goals.includes('Lose fat')) {
      return `${adjective} Lean ${mainIngredient} Dish`;
    } else {
      return `${adjective} ${mainIngredient} Creation`;
    }
  };
  
  const generateIngredients = (ingredientInput: string): string[] => {
    // This would be AI-generated in production
    return ingredientInput.split(',').map(i => i.trim());
  };
  
  const generateInstructions = (): string => {
    // This would be AI-generated in production
    return `1. Prepare all ingredients by washing and cutting them.
2. Heat a pan over medium heat with a bit of oil.
3. Cook the protein until fully cooked through.
4. Add vegetables and cook for another 3-5 minutes.
5. Season with herbs and spices to taste.
6. Serve hot and enjoy your nutritious meal!`;
  };

  if (loading) {
    return (
      <div className="container max-w-xl px-4 py-8">
        <div className="space-y-6">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-primary">FiMe</h1>
            <p className="text-muted-foreground">Creating your perfect recipe...</p>
          </div>
          
          <Skeleton className="w-full h-[300px] rounded-lg" />
          <Skeleton className="w-full h-8" />
          <Skeleton className="w-3/4 h-8" />
          <div className="space-y-2">
            <Skeleton className="w-full h-6" />
            <Skeleton className="w-full h-6" />
            <Skeleton className="w-full h-6" />
          </div>
        </div>
      </div>
    );
  }

  if (!recipe) {
    return null;
  }

  return (
    <div className="container max-w-xl px-4 py-8">
      <div className="space-y-6">
        <div className="text-center mb-4">
          <h1 className="text-3xl font-bold text-primary">Your Recipe</h1>
        </div>
        
        {recipe.imageUrl && (
          <Card className="overflow-hidden">
            <img 
              src={recipe.imageUrl} 
              alt={recipe.recipeName} 
              className="w-full h-[250px] object-cover"
            />
          </Card>
        )}
        
        <Card className="p-6">
          <h2 className="text-2xl font-bold mb-2">{recipe.recipeName}</h2>
          <div className="flex flex-wrap gap-2 mb-4">
            {recipe.goals.map((goal) => (
              <span key={goal} className="tag">{goal}</span>
            ))}
            <span className="tag">{recipe.cookingTime} mins</span>
          </div>
          
          <div className="grid grid-cols-4 gap-2 p-3 bg-muted rounded-md mb-6">
            <div className="text-center">
              <p className="text-lg font-bold">{recipe.calories}</p>
              <p className="text-xs text-muted-foreground">calories</p>
            </div>
            <div className="text-center">
              <p className="text-lg font-bold">{recipe.protein}g</p>
              <p className="text-xs text-muted-foreground">protein</p>
            </div>
            <div className="text-center">
              <p className="text-lg font-bold">{recipe.carbs}g</p>
              <p className="text-xs text-muted-foreground">carbs</p>
            </div>
            <div className="text-center">
              <p className="text-lg font-bold">{recipe.fat}g</p>
              <p className="text-xs text-muted-foreground">fat</p>
            </div>
          </div>
          
          <div className="mb-6">
            <h3 className="font-semibold mb-2">Ingredients</h3>
            <ul className="list-disc pl-5 space-y-1">
              {recipe.ingredients.map((ingredient, index) => (
                <li key={index}>{ingredient}</li>
              ))}
            </ul>
          </div>
          
          <div>
            <h3 className="font-semibold mb-2">Instructions</h3>
            <p className="whitespace-pre-line">{recipe.instructions}</p>
          </div>
        </Card>
        
        <div className="flex gap-4">
          <Button 
            onClick={handleSaveRecipe} 
            variant="secondary" 
            className="flex-1"
            disabled={savingRecipe}
          >
            {savingRecipe ? 'Saving...' : 'Save Recipe'}
          </Button>
          <Button 
            onClick={handleSendEmail}
            className="flex-1"
            disabled={sendingEmail}
          >
            {sendingEmail ? 'Sending...' : 'Email Recipe'}
          </Button>
        </div>
        
        <Button 
          onClick={() => navigate('/')}
          variant="outline" 
          className="w-full"
        >
          Create Another Recipe
        </Button>
      </div>
    </div>
  );
};

export default RecipePreview;
